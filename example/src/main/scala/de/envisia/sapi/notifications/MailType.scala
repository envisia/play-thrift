/**
 * Generated by Scrooge
 *   version: 4.7.0-SNAPSHOT
 *   rev: 5979724d4ac92f6b895847e0ebc7a5a67475fa85
 *   built at: 20160604-114938
 */
package de.envisia.sapi.notifications

import de.envisia.play.thrift.ThriftEnum


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object MailType {
  
  case object DocumentProcessForward extends de.envisia.sapi.notifications.models.MailType {
    val value: Int = 1
    val name: String = "DocumentProcessForward"
    val originalName: String = "DOCUMENT_PROCESS_FORWARD"
  }

  private[this] val _SomeDocumentProcessForward = _root_.scala.Some(de.envisia.sapi.notifications.models.MailType.DocumentProcessForward)
  
  case object DocumentProcessReward extends de.envisia.sapi.notifications.models.MailType {
    val value: Int = 2
    val name: String = "DocumentProcessReward"
    val originalName: String = "DOCUMENT_PROCESS_REWARD"
  }

  private[this] val _SomeDocumentProcessReward = _root_.scala.Some(de.envisia.sapi.notifications.models.MailType.DocumentProcessReward)
  
  case object DocumentComment extends de.envisia.sapi.notifications.models.MailType {
    val value: Int = 3
    val name: String = "DocumentComment"
    val originalName: String = "DOCUMENT_COMMENT"
  }

  private[this] val _SomeDocumentComment = _root_.scala.Some(de.envisia.sapi.notifications.models.MailType.DocumentComment)

  case class EnumUnknownMailType(value: Int) extends de.envisia.sapi.notifications.models.MailType {
    val name: String = "EnumUnknownMailType" + value
    def originalName: String = name
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * @throws NoSuchElementException if the value is not found.
   */
  def apply(value: Int): de.envisia.sapi.notifications.models.MailType =
    value match {
      case 1 => de.envisia.sapi.notifications.models.MailType.DocumentProcessForward
      case 2 => de.envisia.sapi.notifications.models.MailType.DocumentProcessReward
      case 3 => de.envisia.sapi.notifications.models.MailType.DocumentComment
      case _ => throw new NoSuchElementException(value.toString)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * returns an EnumUnknownMailType(value) if the value is not found.
   * In particular this allows ignoring new values added to an enum
   * in the IDL on the producer side when the consumer was not updated.
   */
  def getOrUnknown(value: Int): de.envisia.sapi.notifications.models.MailType =
    get(value) match {
      case _root_.scala.Some(e) => e
      case _root_.scala.None => EnumUnknownMailType(value)
    }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): _root_.scala.Option[de.envisia.sapi.notifications.models.MailType] =
    value match {
      case 1 => _SomeDocumentProcessForward
      case 2 => _SomeDocumentProcessReward
      case 3 => _SomeDocumentComment
      case _ => _root_.scala.None
    }

  def valueOf(name: String): _root_.scala.Option[de.envisia.sapi.notifications.models.MailType] =
    name.toLowerCase match {
      case "documentprocessforward" => _SomeDocumentProcessForward
      case "documentprocessreward" => _SomeDocumentProcessReward
      case "documentcomment" => _SomeDocumentComment
      case _ => _root_.scala.None
    }

  lazy val list: List[de.envisia.sapi.notifications.models.MailType] = scala.List[de.envisia.sapi.notifications.models.MailType](
    de.envisia.sapi.notifications.models.MailType.DocumentProcessForward,
    de.envisia.sapi.notifications.models.MailType.DocumentProcessReward,
    de.envisia.sapi.notifications.models.MailType.DocumentComment
  )
}



@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait MailType extends ThriftEnum with Serializable